Microsoft (R) Macro Assembler Version 14.27.29111.0	    11/09/20 00:59:59
example.asm						     Page 1 - 1


				; Author:  MingkuanPang
				; Date:    10/29/2020    
				;没人看得懂系列......
				.586
				.MODEL FLAT
				 INCLUDE io.h
			      C ; IO.H -- header file for I/O macros (listing suppressed)
			      C .NOLIST      ; turn off listing
			      C .LIST        ; begin listing
			      C 
				.STACK  4096            ; reserve 4096-byte stack

 00000000			.DATA	; reserve storage for data

 00000000  0000001E [		string	BYTE	30	DUP(0),0
	    00
	   ] 00
 0000001F 00000000		num		DWORD	0
 00000023 50 6C 65 61 73	inprompt	BYTE	"Please enter your binary number",0
	   65 20 65 6E 74
	   65 72 20 79 6F
	   75 72 20 62 69
	   6E 61 72 79 20
	   6E 75 6D 62 65
	   72 00
 00000043  0000000B [		result	BYTE	11 DUP(?),0
	    00
	   ] 00
 0000004F 43 6F 6E 76 65	answer	BYTE	"Convert it to octal number it will be :",0
	   72 74 20 69 74
	   20 74 6F 20 6F
	   63 74 61 6C 20
	   6E 75 6D 62 65
	   72 20 69 74 20
	   77 69 6C 6C 20
	   62 65 20 3A 00

				cbo	MACRO	num,str
					lea		eax,str
					push	eax
					lea		eax,num
					push	eax
					call	cboProc
					add		esp,8
					ENDM
				cwtoa	MACRO	num,str
					lea		eax,str
					push	eax
					pushd	num
					call	cwtoaProc
					add		esp,8
					ENDM
 00000000			.CODE       
 00000000			_MainProc    PROC	
					input	inprompt,string,30
					cbo		num,string
					cwtoa	num,result
					output	answer,result
 00000062  B8 00000000			mov		eax,0
 00000067  C3				ret
 00000068			_MainProc    ENDP


				;convert byte to octal digits
				;oct,byte
 00000068			cboProc		PROC
 00000068  55				push	ebp
 00000069  8B EC			mov		ebp,esp
 0000006B  50				push	eax
 0000006C  53				push	ebx
 0000006D  51				push	ecx
 0000006E  52				push	edx
 0000006F  8B 5D 08			mov		ebx,[ebp+8];oct
 00000072  8B 45 0C			mov		eax,[ebp+12];byte
 00000075  C7 03 00000000		mov		DWORD PTR [ebx],0
 0000007B  B9 00000002			mov		ecx,2
 00000080				forloop1:
 00000080  BA 00000001			mov		edx,1
 00000085  D3 E2			shl		edx,cl
 00000087  D1 EA			shr		edx,1
 00000089  80 38 31			cmp		BYTE PTR [eax],'1'
 0000008C  75 02			jne		nextdigit
 0000008E  01 13			add		DWORD PTR [ebx],edx
 00000090				nextdigit:
 00000090  40				inc		eax
 00000091  E2 ED			loop	forloop1
 00000093  C1 23 04			shl		DWORD PTR [ebx],4
 00000096  B9 00000003			mov		ecx,3
 0000009B				forloop2:
 0000009B  BA 00000001			mov		edx,1
 000000A0  D3 E2			shl		edx,cl
 000000A2  D1 EA			shr		edx,1
 000000A4  80 38 31			cmp		BYTE PTR [eax],'1'
 000000A7  75 02			jne		nextdigit2
 000000A9  01 13			add		DWORD PTR [ebx],edx
 000000AB				nextdigit2:
 000000AB  40				inc		eax
 000000AC  E2 ED			loop	forloop2
 000000AE  C1 23 04			shl		DWORD PTR [ebx],4
 000000B1  B9 00000003			mov		ecx,3
 000000B6				forloop3:
 000000B6  BA 00000001			mov		edx,1
 000000BB  D3 E2			shl		edx,cl
 000000BD  D1 EA			shr		edx,1
 000000BF  80 38 31			cmp		BYTE PTR [eax],'1'
 000000C2  75 02			jne		nextdigit3
 000000C4  01 13			add		DWORD PTR [ebx],edx
 000000C6				nextdigit3:
 000000C6  40				inc		eax
 000000C7  E2 ED			loop	forloop3

 000000C9				elsezero:
 000000C9  5A				pop		edx
 000000CA  59				pop		ecx
 000000CB  5B				pop		ebx
 000000CC  58				pop		eax
 000000CD  5D				pop		ebp
 000000CE  C3				ret
 000000CF			cboProc		ENDP

				;convert a word value to byte value
 000000CF			cwtoaProc	PROC
 000000CF  55				push	ebp
 000000D0  8B EC			mov		ebp,esp
 000000D2  50				push	eax
 000000D3  53				push	ebx
 000000D4  51				push	ecx
 000000D5  52				push	edx
 000000D6  8B 5D 08			mov		ebx,[ebp+8];num
 000000D9  8B C3			mov		eax,ebx
 000000DB  B9 00000004			mov		ecx,4
 000000E0  BA 00001000			mov		edx,1000h
 000000E5				whileloop:
 000000E5  85 DA			test	ebx,edx
 000000E7  75 0A			jnz		endwhile
 000000E9  C1 EA 04			shr		edx,4
 000000EC  49				dec		ecx
 000000ED  66| C1 C0 04			rol		ax,4
 000000F1  EB F2			jmp		whileloop
 000000F3				endwhile:
 000000F3  8B D8			mov		ebx,eax
 000000F5  8B 45 0C			mov		eax,[ebp+12];string
 000000F8				forloop:
 000000F8  66| C1 C3 04			rol		bx,4
 000000FC  66| 8B D3			mov		dx,bx
 000000FF  83 E2 0F			and		edx,00000fh
 00000102  83 CA 30			or		edx,30h
 00000105  88 10			mov		BYTE PTR [eax],dl
 00000107  40				inc		eax
 00000108  E2 EE			loop	forloop
 0000010A  5A				pop		edx
 0000010B  59				pop		ecx
 0000010C  5B				pop		ebx
 0000010D  58				pop		eax
 0000010E  5D				pop		ebp
 0000010F  C3				ret
 00000110			cwtoaProc	ENDP
				END
Microsoft (R) Macro Assembler Version 14.27.29111.0	    11/09/20 00:59:59
example.asm						     Symbols 2 - 1




Macros:

                N a m e                 Type

atod . . . . . . . . . . . . . .	Proc
atow . . . . . . . . . . . . . .	Proc
cbo  . . . . . . . . . . . . . .	Proc
cwtoa  . . . . . . . . . . . . .	Proc
dtoa . . . . . . . . . . . . . .	Proc
input  . . . . . . . . . . . . .	Proc
output . . . . . . . . . . . . .	Proc
wtoa . . . . . . . . . . . . . .	Proc


Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

FLAT . . . . . . . . . . . . . .	GROUP
STACK  . . . . . . . . . . . . .	32 Bit	 00001000 Para	  Stack	  'STACK'	 
_DATA  . . . . . . . . . . . . .	32 Bit	 00000077 Para	  Public  'DATA'	
_TEXT  . . . . . . . . . . . . .	32 Bit	 00000110 Para	  Public  'CODE'	


Procedures, parameters, and locals:

                N a m e                 Type     Value    Attr

_MainProc  . . . . . . . . . . .	P Near	 00000000 _TEXT	Length= 00000068 Public
cboProc  . . . . . . . . . . . .	P Near	 00000068 _TEXT	Length= 00000067 Public
  forloop1 . . . . . . . . . . .	L Near	 00000080 _TEXT	
  nextdigit  . . . . . . . . . .	L Near	 00000090 _TEXT	
  forloop2 . . . . . . . . . . .	L Near	 0000009B _TEXT	
  nextdigit2 . . . . . . . . . .	L Near	 000000AB _TEXT	
  forloop3 . . . . . . . . . . .	L Near	 000000B6 _TEXT	
  nextdigit3 . . . . . . . . . .	L Near	 000000C6 _TEXT	
  elsezero . . . . . . . . . . .	L Near	 000000C9 _TEXT	
cwtoaProc  . . . . . . . . . . .	P Near	 000000CF _TEXT	Length= 00000041 Public
  whileloop  . . . . . . . . . .	L Near	 000000E5 _TEXT	
  endwhile . . . . . . . . . . .	L Near	 000000F3 _TEXT	
  forloop  . . . . . . . . . . .	L Near	 000000F8 _TEXT	


Symbols:

                N a m e                 Type     Value    Attr

@CodeSize  . . . . . . . . . . .	Number	 00000000h   
@DataSize  . . . . . . . . . . .	Number	 00000000h   
@Interface . . . . . . . . . . .	Number	 00000000h   
@Model . . . . . . . . . . . . .	Number	 00000007h   
@code  . . . . . . . . . . . . .	Text   	 _TEXT
@data  . . . . . . . . . . . . .	Text   	 FLAT
@fardata?  . . . . . . . . . . .	Text   	 FLAT
@fardata . . . . . . . . . . . .	Text   	 FLAT
@stack . . . . . . . . . . . . .	Text   	 FLAT
_getInput  . . . . . . . . . . .	L Near	 00000000 FLAT	External
_showOutput  . . . . . . . . . .	L Near	 00000000 FLAT	External
answer . . . . . . . . . . . . .	Byte	 0000004F _DATA	
atodproc . . . . . . . . . . . .	L Near	 00000000 FLAT	External
atowproc . . . . . . . . . . . .	L Near	 00000000 FLAT	External
dtoaproc . . . . . . . . . . . .	L Near	 00000000 FLAT	External
inprompt . . . . . . . . . . . .	Byte	 00000023 _DATA	
num  . . . . . . . . . . . . . .	DWord	 0000001F _DATA	
result . . . . . . . . . . . . .	Byte	 00000043 _DATA	
string . . . . . . . . . . . . .	Byte	 00000000 _DATA	
wtoaproc . . . . . . . . . . . .	L Near	 00000000 FLAT	External

	   0 Warnings
	   0 Errors
