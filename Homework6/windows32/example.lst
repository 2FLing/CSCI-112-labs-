Microsoft (R) Macro Assembler Version 14.28.29333.0	    12/04/20 13:15:14
example.asm						     Page 1 - 1


				; ASCII	to floating point code(Homework6)
				; Author:  MingkuanPang
				; Date:    12/3/2020    

				.586
				.MODEL FLAT
				INCLUDE io.h
			      C ; IO.H -- header file for I/O macros (listing suppressed)
			      C .NOLIST      ; turn off listing
			      C .LIST        ; begin listing
			      C 
				.STACK  4096            ; reserve 4096-byte stack
 00000000			.DATA	; reserve storage for data
 00000000  00000050 [		string		BYTE 80 DUP (?)
	    00
	   ]
 00000050 50 6C 65 61 73	inPrompt	BYTE "Please enter a string:",0
	   65 20 65 6E 74
	   65 72 20 61 20
	   73 74 72 69 6E
	   67 3A 00
 00000067 54 68 65 20 72	resLbl		BYTE "The reuslt will be:",0
	   65 75 73 6C 74
	   20 77 69 6C 6C
	   20 62 65 3A 00
				strLen	MACRO	str
					lea		eax,str
					push	eax
					call	strLenProc
					add		esp,4
					ENDM

				trimStr	MACRO	str
					push	eax
					lea		eax,str
					push	eax
					call	trimStrProc
					add		esp,4
					pop		eax
					ENDM

				atof	MACRO	str
					push	eax
					lea		eax,str
					push	eax
					call	atofProc
					add		esp,4
					pop		eax
					ENDM

 00000000			.CODE       
 00000000			_MainProc    PROC
					input	inPrompt,string,80
					atof	string
					output	resLbl,string
 00000048  B8 00000000			mov		eax,0
 0000004D  C3				ret
 0000004E			_MainProc    ENDP

				;this program return the length of a string, stored in eax.
 0000004E			strLenProc		PROC
 0000004E  55				push	ebp
 0000004F  8B EC			mov		ebp,esp
 00000051  56				push	esi
 00000052  8B 75 08			mov		esi,[ebp+8]
 00000055  B8 00000000			mov		eax,0

 0000005A				checkChar:
 0000005A  80 3E 00			cmp		BYTE PTR [esi],0	;see if it is the end of the string
 0000005D  74 04			je		finishChecking
 0000005F  40				inc		eax					;if not eax+=1

 00000060				nextChar:
 00000060  46				inc		esi
 00000061  EB F7			jmp		checkChar

 00000063				finishChecking:
 00000063  5E				pop		esi
 00000064  5D				pop		ebp
 00000065  C3				ret
 00000066			strLenProc		ENDP

				;this program will take extra space off,and save it into a new string
				;trimStr(string)
 00000066			trimStrProc		PROC
 00000066  55				push	ebp
 00000067  8B EC			mov		ebp,esp
 00000069  51				push	ecx
 0000006A  56				push	esi
 0000006B  57				push	edi
 0000006C  8B 75 08			mov		esi,[ebp+8]
 0000006F  8B 7D 08			mov		edi,[ebp+8]

 00000072				SkipSpace:
 00000072  80 3E 00			cmp	BYTE PTR [esi],0	;check if it is the end of the string
 00000075  74 0B			je	finish
 00000077  80 3E 20			cmp	BYTE PTR [esi],' '  ;if it is not space then save this character
 0000007A  75 03			jne	saveChar			;otherwise skip it

 0000007C				nextChar:
 0000007C  46				inc		esi
 0000007D  EB F3			jmp		SkipSpace

 0000007F				saveChar:
 0000007F  A4				movsb
 00000080  EB F0			jmp		SkipSpace

 00000082				finish:
 00000082  C6 07 00			mov	BYTE PTR [edi],0
 00000085  5F				pop		edi
 00000086  5E				pop		esi
 00000087  59				pop		ecx
 00000088  5D				pop		ebp
 00000089  C3				ret

 0000008A			trimStrProc		ENDP

				;this program will transfer ascii to floating num
				;and store in ST(0)
				;atof(char [])
				;[ebp-4] ten
				;[ebp-8] point 0 false, -1 true
				;[ebp-12] sign 0 false, -1 true
				;[ebp-16] digit, initialized to 0
 0000008A			atofProc	PROC
 0000008A  55				push	ebp
 0000008B  8B EC			mov		ebp,esp
 0000008D  83 EC 10			sub		esp,16
 00000090  C7 45 FC			mov		DWORD PTR [ebp-4],10	;int ten
	   0000000A
 00000097  C7 45 F8			mov		DWORD PTR [ebp-8],0		;bool point=false
	   00000000
 0000009E  C7 45 F4			mov		DWORD PTR [ebp-12],0	;bool neg=false
	   00000000
 000000A5  50				push	eax
 000000A6  53				push	ebx
 000000A7  51				push	ecx
 000000A8  56				push	esi
 000000A9  8B 75 08			mov		esi,[ebp+8]
 000000AC  56				push	esi
 000000AD  E8 FFFFFFB4			call	trimStrProc
 000000B2  E8 FFFFFF97			call	strLenProc	;set eax to be the length of the string
 000000B7  83 C4 04			add		esp,4
 000000BA  B9 00000000			mov		ecx,0

 000000BF				initializeST:
 000000BF  D9 E8			fld1		;set ST(0)=0.0, ST(1)=1.0
 000000C1  D9 EE			fldz

 000000C3				CheckSign:
 000000C3  80 3E 2D			cmp		BYTE PTR [esi],'-'    ;check if the sign is minus
 000000C6  75 09			jne		anymoreDigit
 000000C8  C7 45 F4			mov		DWORD PTR [ebp-12],-1 ;if the sign is minus then neg=true
	   FFFFFFFF
 000000CF  41				inc		ecx
 000000D0  46				inc		esi

 000000D1				anymoreDigit:
 000000D1  3B C8			cmp		ecx,eax		;if ecx==eax then we are right at the end of the string
 000000D3  74 2D			je		ifNeg
 000000D5  8A 1E			mov		bl,BYTE PTR [esi]
 000000D7  80 FB 2E			cmp		bl,'.'
 000000DA  74 1B			je		point			; if this character is point, then point=true
 000000DC  83 E3 0F			and		ebx,0000000fh	; otherwise convert it into decimal value
 000000DF  89 5D F0			mov		DWORD PTR [ebp-16],ebx	; value=ST(0)*10+value
 000000E2  DA 4D FC			fimul	DWORD PTR [ebp-4]
 000000E5  DA 45 F0			fiadd	DWORD PTR [ebp-16]

 000000E8				checkPoint:							;if we already went through point
 000000E8  83 7D F8 FF			cmp		DWORD PTR [ebp-8],-1		;ST(1) should multiply by 10 everytime when
 000000EC  75 10			jne		nextDigit					;it is going through a digit
 000000EE  D9 C9			fxch	
 000000F0  DA 4D FC			fimul	DWORD PTR [ebp-4]
 000000F3  D9 C9			fxch
 000000F5  EB 07			jmp		nextDigit

 000000F7				point:
 000000F7  C7 45 F8			mov		DWORD PTR [ebp-8],-1	;set point=true
	   FFFFFFFF

 000000FE				nextDigit:
 000000FE  41				inc		ecx
 000000FF  46				inc		esi
 00000100  EB CF			jmp		anymoreDigit
					
 00000102				ifNeg:
 00000102  83 7D F4 FF			cmp		DWORD PTR [ebp-12],-1	;if sign==true, then make it to be negative
 00000106  75 02			jne		noMoreDigit
 00000108  D9 E0			fchs
 0000010A				noMoreDigit:
 0000010A  DE F1			fdivr				;finally ST(0)/=ST(1)
 0000010C  5E				pop		esi
 0000010D  59				pop		ecx
 0000010E  5B				pop		ebx
 0000010F  58				pop		eax
 00000110  8B E5			mov		esp,ebp
 00000112  5D				pop		ebp
 00000113  C3				ret
 00000114			atofProc	ENDP
				END
Microsoft (R) Macro Assembler Version 14.28.29333.0	    12/04/20 13:15:14
example.asm						     Symbols 2 - 1




Macros:

                N a m e                 Type

atod . . . . . . . . . . . . . .	Proc
atof . . . . . . . . . . . . . .	Proc
atow . . . . . . . . . . . . . .	Proc
dtoa . . . . . . . . . . . . . .	Proc
input  . . . . . . . . . . . . .	Proc
output . . . . . . . . . . . . .	Proc
strLen . . . . . . . . . . . . .	Proc
trimStr  . . . . . . . . . . . .	Proc
wtoa . . . . . . . . . . . . . .	Proc


Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

FLAT . . . . . . . . . . . . . .	GROUP
STACK  . . . . . . . . . . . . .	32 Bit	 00001000 Para	  Stack	  'STACK'	 
_DATA  . . . . . . . . . . . . .	32 Bit	 0000007B Para	  Public  'DATA'	
_TEXT  . . . . . . . . . . . . .	32 Bit	 00000114 Para	  Public  'CODE'	


Procedures, parameters, and locals:

                N a m e                 Type     Value    Attr

_MainProc  . . . . . . . . . . .	P Near	 00000000 _TEXT	Length= 0000004E Public
atofProc . . . . . . . . . . . .	P Near	 0000008A _TEXT	Length= 0000008A Public
  initializeST . . . . . . . . .	L Near	 000000BF _TEXT	
  CheckSign  . . . . . . . . . .	L Near	 000000C3 _TEXT	
  anymoreDigit . . . . . . . . .	L Near	 000000D1 _TEXT	
  checkPoint . . . . . . . . . .	L Near	 000000E8 _TEXT	
  point  . . . . . . . . . . . .	L Near	 000000F7 _TEXT	
  nextDigit  . . . . . . . . . .	L Near	 000000FE _TEXT	
  ifNeg  . . . . . . . . . . . .	L Near	 00000102 _TEXT	
  noMoreDigit  . . . . . . . . .	L Near	 0000010A _TEXT	
strLenProc . . . . . . . . . . .	P Near	 0000004E _TEXT	Length= 00000018 Public
  checkChar  . . . . . . . . . .	L Near	 0000005A _TEXT	
  nextChar . . . . . . . . . . .	L Near	 00000060 _TEXT	
  finishChecking . . . . . . . .	L Near	 00000063 _TEXT	
trimStrProc  . . . . . . . . . .	P Near	 00000066 _TEXT	Length= 00000024 Public
  SkipSpace  . . . . . . . . . .	L Near	 00000072 _TEXT	
  nextChar . . . . . . . . . . .	L Near	 0000007C _TEXT	
  saveChar . . . . . . . . . . .	L Near	 0000007F _TEXT	
  finish . . . . . . . . . . . .	L Near	 00000082 _TEXT	


Symbols:

                N a m e                 Type     Value    Attr

@CodeSize  . . . . . . . . . . .	Number	 00000000h   
@DataSize  . . . . . . . . . . .	Number	 00000000h   
@Interface . . . . . . . . . . .	Number	 00000000h   
@Model . . . . . . . . . . . . .	Number	 00000007h   
@code  . . . . . . . . . . . . .	Text   	 _TEXT
@data  . . . . . . . . . . . . .	Text   	 FLAT
@fardata?  . . . . . . . . . . .	Text   	 FLAT
@fardata . . . . . . . . . . . .	Text   	 FLAT
@stack . . . . . . . . . . . . .	Text   	 FLAT
_getInput  . . . . . . . . . . .	L Near	 00000000 FLAT	External
_showOutput  . . . . . . . . . .	L Near	 00000000 FLAT	External
atodproc . . . . . . . . . . . .	L Near	 00000000 FLAT	External
atowproc . . . . . . . . . . . .	L Near	 00000000 FLAT	External
dtoaproc . . . . . . . . . . . .	L Near	 00000000 FLAT	External
inPrompt . . . . . . . . . . . .	Byte	 00000050 _DATA	
resLbl . . . . . . . . . . . . .	Byte	 00000067 _DATA	
string . . . . . . . . . . . . .	Byte	 00000000 _DATA	
wtoaproc . . . . . . . . . . . .	L Near	 00000000 FLAT	External

	   0 Warnings
	   0 Errors
