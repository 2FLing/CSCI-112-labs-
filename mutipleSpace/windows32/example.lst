Microsoft (R) Macro Assembler Version 14.28.29333.0	    11/19/20 17:05:48
example.asm						     Page 1 - 1


				; Example assembly language program
				; This program will prmopts for and inputs 
				; a person`s name in the "lastname firstname"
				; format, a comma or space separate the names
				; originally and there is no characters following the 
				; firstname and it will build the name in a new format
				; with "firstname lastname".
				; Author:  MingkuanPang
				; Date:    11/17/2020    

				.586
				.MODEL FLAT
				 INCLUDE io.h
			      C ; IO.H -- header file for I/O macros (listing suppressed)
			      C .NOLIST      ; turn off listing
			      C .LIST        ; begin listing
			      C 
				.STACK  4096            ; reserve 4096-byte stack

 00000000			.DATA	; reserve storage for data
 00000000  00000050 [		firstName	BYTE	80	DUP (?)
	    00
	   ]
 00000050  00000050 [		lastName	BYTE	80	DUP (?)
	    00
	   ]
 000000A0  00000050 [		sbName		BYTE	80  DUP (?)
	    00
	   ]
 000000F0 00000000		firstNameLen	DWORD	?
 000000F4 00000000		lastNameLen		DWORD	?
 000000F8 00000000		nameLen			DWORD	?
 000000FC 50 6C 65 61 73	inputPrompt		BYTE	"Please enter you name (lastName Space firstname):",0
	   65 20 65 6E 74
	   65 72 20 79 6F
	   75 20 6E 61 6D
	   65 20 28 6C 61
	   73 74 4E 61 6D
	   65 20 53 70 61
	   63 65 20 66 69
	   72 73 74 6E 61
	   6D 65 29 3A 00
 0000012E 54 68 65 20 72	resultLbl		BYTE	"The result will be: ",0
	   65 73 75 6C 74
	   20 77 69 6C 6C
	   20 62 65 3A 20
	   00

				fixName	MACRO	name
					lea		eax,name
					push	eax
					call	fixNameProc
					add		esp,4
					ENDM
				strLen	MACRO	string
					lea		eax,string
					push	eax
					call	strLenProc
					add		esp,4
					ENDM
 00000000			.CODE       
 00000000			_MainProc    PROC
					input	inputPrompt,sbName,80
					strLen	sbName
 0000002D  A3 000000F8 R		mov		nameLen,eax
					fixName	sbName
					output	resultLbl,sbName
 0000005A  B8 00000000			mov		eax,0
 0000005F  C3				ret
 00000060			_MainProc    ENDP

 00000060			fixNameProc		PROC
 00000060  55				push	ebp
 00000061  8B EC			mov		ebp,esp
 00000063  57				push	edi
 00000064  56				push	esi
 00000065  50				push	eax
 00000066  51				push	ecx

 00000067  8B 7D 08			mov		edi,[ebp+8]
 0000006A  8B 0D 000000F8 R		mov		ecx,nameLen
 00000070  B0 20			mov		al,' '
 00000072  FC				cld
 00000073  F2/ AE			repne	scasb

 00000075				getLastNameLen:
 00000075  41				inc		ecx
 00000076  A1 000000F8 R		mov		eax,nameLen
 0000007B  2B C1			sub		eax,ecx
 0000007D  A3 000000F4 R		mov		lastNameLen,eax
					

 00000082				skipSpace:
 00000082  B0 20			mov		al,' '
 00000084  FC				cld
 00000085  F3/ AE			repe	scasb
 00000087  4F				dec		edi

 00000088				getFirstName:
 00000088  8B F7			mov		esi,edi
 0000008A  8D 3D 00000000 R		lea		edi,firstName
 00000090  F3/ A4			rep		movsb
					strLen	firstName
 000000A1  A3 000000F0 R		mov		firstNameLen,eax

 000000A6				getLastName:
 000000A6  8D 3D 00000050 R		lea		edi,lastName
 000000AC  8B 75 08			mov		esi,[ebp+8]
 000000AF  8B 0D 000000F4 R		mov		ecx,lastNameLen
 000000B5  FC				cld
 000000B6  F3/ A4			rep		movsb

 000000B8				writeFirstName:
 000000B8  8D 35 00000000 R		lea		esi,firstName
 000000BE  8B 7D 08			mov		edi,[ebp+8]
 000000C1  8B 0D 000000F0 R		mov		ecx,firstNameLen
 000000C7  FC				cld
 000000C8  F3/ A4			rep		movsb

 000000CA				writeAspace:
 000000CA  C6 07 20			mov		BYTE PTR [edi],' '
 000000CD  47				inc		edi

 000000CE				wirteLastName:
 000000CE  8D 35 00000050 R		lea		esi,lastName
 000000D4  8B 0D 000000F4 R		mov		ecx,lastNameLen
 000000DA  FC				cld
 000000DB  F3/ A4			rep		movsb
 000000DD  C6 07 00			mov		BYTE PTR [edi],0

 000000E0				finishFixingName:
 000000E0  59				pop		ecx
 000000E1  58				pop		eax
 000000E2  5E				pop		esi
 000000E3  5F				pop		edi
 000000E4  5D				pop		ebp
 000000E5  C3				ret
 000000E6			fixNameProc		ENDP

 000000E6			strLenProc	PROC
 000000E6  55				push	ebp
 000000E7  8B EC			mov		ebp,esp
 000000E9  53				push	ebx
 000000EA  8B 5D 08			mov		ebx,[ebp+8]
 000000ED  B8 00000000			mov		eax,0
 000000F2				countbytes:
 000000F2  80 3B 00			cmp		BYTE PTR [ebx],0
 000000F5  74 04			je		endcount
 000000F7  40				inc		eax
 000000F8  43				inc		ebx
 000000F9  EB F7			jmp		countbytes
 000000FB				endcount:
 000000FB  5B				pop		ebx
 000000FC  5D				pop		ebp
 000000FD  C3				ret
 000000FE			strlenProc	ENDP
				END
Microsoft (R) Macro Assembler Version 14.28.29333.0	    11/19/20 17:05:48
example.asm						     Symbols 2 - 1




Macros:

                N a m e                 Type

atod . . . . . . . . . . . . . .	Proc
atow . . . . . . . . . . . . . .	Proc
dtoa . . . . . . . . . . . . . .	Proc
fixName  . . . . . . . . . . . .	Proc
input  . . . . . . . . . . . . .	Proc
output . . . . . . . . . . . . .	Proc
strLen . . . . . . . . . . . . .	Proc
wtoa . . . . . . . . . . . . . .	Proc


Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

FLAT . . . . . . . . . . . . . .	GROUP
STACK  . . . . . . . . . . . . .	32 Bit	 00001000 Para	  Stack	  'STACK'	 
_DATA  . . . . . . . . . . . . .	32 Bit	 00000143 Para	  Public  'DATA'	
_TEXT  . . . . . . . . . . . . .	32 Bit	 000000FE Para	  Public  'CODE'	


Procedures, parameters, and locals:

                N a m e                 Type     Value    Attr

_MainProc  . . . . . . . . . . .	P Near	 00000000 _TEXT	Length= 00000060 Public
fixNameProc  . . . . . . . . . .	P Near	 00000060 _TEXT	Length= 00000086 Public
  getLastNameLen . . . . . . . .	L Near	 00000075 _TEXT	
  skipSpace  . . . . . . . . . .	L Near	 00000082 _TEXT	
  getFirstName . . . . . . . . .	L Near	 00000088 _TEXT	
  getLastName  . . . . . . . . .	L Near	 000000A6 _TEXT	
  writeFirstName . . . . . . . .	L Near	 000000B8 _TEXT	
  writeAspace  . . . . . . . . .	L Near	 000000CA _TEXT	
  wirteLastName  . . . . . . . .	L Near	 000000CE _TEXT	
  finishFixingName . . . . . . .	L Near	 000000E0 _TEXT	
strLenProc . . . . . . . . . . .	P Near	 000000E6 _TEXT	Length= 00000018 Public
  countbytes . . . . . . . . . .	L Near	 000000F2 _TEXT	
  endcount . . . . . . . . . . .	L Near	 000000FB _TEXT	


Symbols:

                N a m e                 Type     Value    Attr

@CodeSize  . . . . . . . . . . .	Number	 00000000h   
@DataSize  . . . . . . . . . . .	Number	 00000000h   
@Interface . . . . . . . . . . .	Number	 00000000h   
@Model . . . . . . . . . . . . .	Number	 00000007h   
@code  . . . . . . . . . . . . .	Text   	 _TEXT
@data  . . . . . . . . . . . . .	Text   	 FLAT
@fardata?  . . . . . . . . . . .	Text   	 FLAT
@fardata . . . . . . . . . . . .	Text   	 FLAT
@stack . . . . . . . . . . . . .	Text   	 FLAT
_getInput  . . . . . . . . . . .	L Near	 00000000 FLAT	External
_showOutput  . . . . . . . . . .	L Near	 00000000 FLAT	External
atodproc . . . . . . . . . . . .	L Near	 00000000 FLAT	External
atowproc . . . . . . . . . . . .	L Near	 00000000 FLAT	External
dtoaproc . . . . . . . . . . . .	L Near	 00000000 FLAT	External
firstNameLen . . . . . . . . . .	DWord	 000000F0 _DATA	
firstName  . . . . . . . . . . .	Byte	 00000000 _DATA	
inputPrompt  . . . . . . . . . .	Byte	 000000FC _DATA	
lastNameLen  . . . . . . . . . .	DWord	 000000F4 _DATA	
lastName . . . . . . . . . . . .	Byte	 00000050 _DATA	
nameLen  . . . . . . . . . . . .	DWord	 000000F8 _DATA	
resultLbl  . . . . . . . . . . .	Byte	 0000012E _DATA	
sbName . . . . . . . . . . . . .	Byte	 000000A0 _DATA	
wtoaproc . . . . . . . . . . . .	L Near	 00000000 FLAT	External

	   0 Warnings
	   0 Errors
