Microsoft (R) Macro Assembler Version 14.27.29111.0	    11/06/20 02:24:19
example.asm						     Page 1 - 1


				; Author:  MingkuanPang
				; Date:    10/29/2020    

				.586
				.MODEL FLAT
				 INCLUDE io.h
			      C ; IO.H -- header file for I/O macros (listing suppressed)
			      C .NOLIST      ; turn off listing
			      C .LIST        ; begin listing
			      C 
				.STACK  4096            ; reserve 4096-byte stack

 00000000			.DATA	; reserve storage for data
 00000000 00000000		num		DWORD	?
 00000004  00000020 [		Binstr  BYTE	32	DUP(?),0
	    00
	   ] 00
 00000025 43 6F 6E 76 65	answer	BYTE	"Convert it to binary num, it is going to be: ",0
	   72 74 20 69 74
	   20 74 6F 20 62
	   69 6E 61 72 79
	   20 6E 75 6D 2C
	   20 69 74 20 69
	   73 20 67 6F 69
	   6E 67 20 74 6F
	   20 62 65 3A 20
	   00
 00000053  0000001E [		string	BYTE	30  DUP(?)
	    00
	   ]
 00000071 50 6C 65 61 73	inputPrompt  BYTE	"Please enter a number: ",0
	   65 20 65 6E 74
	   65 72 20 61 20
	   6E 75 6D 62 65
	   72 3A 20 00
				cba		MACRO  num,Binstr

						lea		eax,Binstr
						push	eax
						mov		eax,num
						push	eax
						call	cbaProc
						add		esp,8
						ENDM

				atoh	MACRO	string,num
						
						lea		eax,num
						push	eax
						lea		eax,string
						push	eax
						call	atohProc
						add		esp,8
						ENDM
 00000000			.CODE       
 00000000			_MainProc    PROC
					input	inputPrompt,string,30
					atod	string
 0000002D  A3 00000000 R		mov		num,eax
					cba		num,Binstr
					output	answer,Binstr
 00000060  B8 00000000			mov		eax,0
 00000065  C3				ret
 00000066			_MainProc    ENDP

				;cba	num,binstr
 00000066			cbaProc		PROC
 00000066  55				push	ebp
 00000067  8B EC			mov		ebp,esp
 00000069  50				push	eax
 0000006A  53				push	ebx
 0000006B  51				push	ecx
 0000006C  8B 45 08			mov		eax,[ebp+8]	;num
 0000006F  8B 5D 0C			mov		ebx,[ebp+12] ;address of the string array
 00000072  BE 00000000			mov		esi,0
 00000077  B9 00000020			mov		ecx,32
 0000007C				forloop:
 0000007C  D1 C0			rol		eax,1
 0000007E  72 05			jc		addOne
 00000080  C6 03 30			mov		BYTE PTR [ebx],'0'
 00000083  EB 03			jmp		nextbyte
 00000085				addone:
 00000085  C6 03 31			mov		BYTE PTR [ebx],'1'
 00000088				nextbyte:
 00000088  43				inc		ebx
 00000089  E2 F1			loop	forloop
 0000008B  59				pop		ecx
 0000008C  5B				pop		ebx
 0000008D  58				pop		eax
 0000008E  5D				pop		ebp
 0000008F  C3				ret
 00000090			cbaProc		ENDP

				; Convert ascii to dword
 00000090			atohProc	PROC
 00000090  55				push	ebp
 00000091  8B EC			mov		ebp,esp
 00000093  50				push	eax
 00000094  53				push	ebx
 00000095  56				push	esi
 00000096  52				push	edx
 00000097  8B 75 08			mov		esi,[ebp+8] ;string
 0000009A  8B 55 0C			mov		edx,[ebp+12] ;num
 0000009D  B8 00000000			mov		eax,0
 000000A2				whileloop:
 000000A2  80 3E 30			cmp		BYTE PTR [esi],'0'
 000000A5  7C 12			jl		endloop
 000000A7  80 3E 39			cmp		BYTE PTR [esi],'9'
 000000AA  7F 0D			jg		endloop
 000000AC  8A 1E			mov		bl,BYTE PTR [esi]
 000000AE  83 E3 0F			and		ebx,00000000Fh
 000000B1  6B C0 10			imul	eax,10h
 000000B4  03 C3			add		eax,ebx
 000000B6  46				inc		esi
 000000B7  EB E9			jmp		whileloop
 000000B9				endloop:
 000000B9  89 02			mov		DWORD PTR [edx],eax
 000000BB  5A				pop		edx
 000000BC  5E				pop		esi
 000000BD  5B				pop		ebx
 000000BE  58				pop		eax
 000000BF  5D				pop		ebp
 000000C0  C3				ret
 000000C1			atohProc	ENDP
				END
Microsoft (R) Macro Assembler Version 14.27.29111.0	    11/06/20 02:24:19
example.asm						     Symbols 2 - 1




Macros:

                N a m e                 Type

atod . . . . . . . . . . . . . .	Proc
atoh . . . . . . . . . . . . . .	Proc
atow . . . . . . . . . . . . . .	Proc
cba  . . . . . . . . . . . . . .	Proc
dtoa . . . . . . . . . . . . . .	Proc
input  . . . . . . . . . . . . .	Proc
output . . . . . . . . . . . . .	Proc
wtoa . . . . . . . . . . . . . .	Proc


Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

FLAT . . . . . . . . . . . . . .	GROUP
STACK  . . . . . . . . . . . . .	32 Bit	 00001000 Para	  Stack	  'STACK'	 
_DATA  . . . . . . . . . . . . .	32 Bit	 00000089 Para	  Public  'DATA'	
_TEXT  . . . . . . . . . . . . .	32 Bit	 000000C1 Para	  Public  'CODE'	


Procedures, parameters, and locals:

                N a m e                 Type     Value    Attr

_MainProc  . . . . . . . . . . .	P Near	 00000000 _TEXT	Length= 00000066 Public
atohProc . . . . . . . . . . . .	P Near	 00000090 _TEXT	Length= 00000031 Public
  whileloop  . . . . . . . . . .	L Near	 000000A2 _TEXT	
  endloop  . . . . . . . . . . .	L Near	 000000B9 _TEXT	
cbaProc  . . . . . . . . . . . .	P Near	 00000066 _TEXT	Length= 0000002A Public
  forloop  . . . . . . . . . . .	L Near	 0000007C _TEXT	
  addone . . . . . . . . . . . .	L Near	 00000085 _TEXT	
  nextbyte . . . . . . . . . . .	L Near	 00000088 _TEXT	


Symbols:

                N a m e                 Type     Value    Attr

@CodeSize  . . . . . . . . . . .	Number	 00000000h   
@DataSize  . . . . . . . . . . .	Number	 00000000h   
@Interface . . . . . . . . . . .	Number	 00000000h   
@Model . . . . . . . . . . . . .	Number	 00000007h   
@code  . . . . . . . . . . . . .	Text   	 _TEXT
@data  . . . . . . . . . . . . .	Text   	 FLAT
@fardata?  . . . . . . . . . . .	Text   	 FLAT
@fardata . . . . . . . . . . . .	Text   	 FLAT
@stack . . . . . . . . . . . . .	Text   	 FLAT
Binstr . . . . . . . . . . . . .	Byte	 00000004 _DATA	
_getInput  . . . . . . . . . . .	L Near	 00000000 FLAT	External
_showOutput  . . . . . . . . . .	L Near	 00000000 FLAT	External
answer . . . . . . . . . . . . .	Byte	 00000025 _DATA	
atodproc . . . . . . . . . . . .	L Near	 00000000 FLAT	External
atowproc . . . . . . . . . . . .	L Near	 00000000 FLAT	External
dtoaproc . . . . . . . . . . . .	L Near	 00000000 FLAT	External
inputPrompt  . . . . . . . . . .	Byte	 00000071 _DATA	
num  . . . . . . . . . . . . . .	DWord	 00000000 _DATA	
string . . . . . . . . . . . . .	Byte	 00000053 _DATA	
wtoaproc . . . . . . . . . . . .	L Near	 00000000 FLAT	External

	   0 Warnings
	   0 Errors
